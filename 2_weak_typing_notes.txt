<!-- 2. Weak typing -->
<!-- Dynamic typing example
let x;
x = 'hello';
x = 5;
x = false;
 -->

<!-- Type conversion tables -->
<!-- To Boolean
 -->
<!-- 
// Do this:
// This always returns a boolean value
const isObject = (obj) => !!obj && typeof obj === "object";

// Or this:
const isObject = (obj) => Boolean(obj) && typeof obj === "object";

// Or this:
const isObject = (obj) => obj !== null && typeof obj === "object";

// Instead of this:
// This may return falsy values that are not equal to false
const isObject = (obj) => obj && typeof obj === "object";
 -->

<!-- To Number
 -->
<!--
255; // two-hundred and fifty-five
255.0; // same number
255 === 255.0; // true
255 === 0xff; // true (hexadecimal notation)
255 === 0b11111111; // true (binary notation)
255 === 0.255e3; // true (decimal exponential notation)
 -->

<!-- To String
 -->
<!-- 
const strPrim = "foo"; // A literal is a string primitive
const strPrim2 = String(1); // Coerced into the string primitive "1"
const strPrim3 = String(true); // Coerced into the string primitive "true"
const strObj = new String(strPrim); // String with new returns a string wrapper object.

console.log(typeof strPrim); // "string"
console.log(typeof strPrim2); // "string"
console.log(typeof strPrim3); // "string"
console.log(typeof strObj); // "object"

const s1 = "2 + 2"; // creates a string primitive
const s2 = new String("2 + 2"); // creates a String object
console.log(eval(s1)); // returns the number 4
console.log(eval(s2)); // returns the string "2 + 2"

console.log(eval(s2.valueOf())); // returns the number 4
 -->

<!-- Explicit type conversion table -->
<!-- +
 -->
<!--
console.log(2 + 2);
// Expected output: 4

console.log(2 + true);
// Expected output: 3

console.log("hello " + "everyone");
// Expected output: "hello everyone"

console.log(2001 + ": A Space Odyssey");
// Expected output: "2001: A Space Odyssey"
-->

<!-- Number()
 -->
<!-- 
Number("123"); // returns the number 123
Number("123") === 123; // true

Number("unicorn"); // NaN
Number(undefined); // NaN
-->

<!-- parseInt(), parseFloat()
 -->
<!-- 
console.log(parseInt("123"));
// 123 (default base-10)
console.log(parseInt("   123 "));
// 123 (whitespace is ignored)
console.log(parseInt("077"));
// 77 (leading zeros are ignored)
console.log(parseInt("1.9"));
// 1 (decimal part is truncated)

function circumference(r) {
return parseFloat(r) * 2.0 * Math.PI;
}

console.log(circumference(4.567));
// Expected output: 28.695307297889173

console.log(circumference("4.567abcdefgh"));
// Expected output: 28.695307297889173

console.log(circumference("abcdefgh"));
// Expected output: NaN
 -->

<!-- Boolean(), !!
 -->
<!--
const good = Boolean(expression);
const good2 = !!expression;
-->

<!-- +""
 -->
<!-- 
let a = '' + 50;
console.log(a);
-->

<!-- toString()
 -->
<!--
function Dog(name) {
    this.name = name;
}

const dog1 = new Dog("Gabby");

Dog.prototype.toString = function dogToString() {
  return `${this.name}`;
};

console.log(dog1.toString());
// Expected output: "Gabby"
 -->

<!-- Dealing with types -->
<!-- 
let x = 5;
alert(typeof x);
 -->

<!-- NaN
 -->
<!-- 
let product = 5 * 'five';
console.log(product);

console.log(product == NaN);
console.log(product === NaN);
console.log(NaN == NaN);

c
 -->

<!-- Infinity
 -->
<!-- 
let result = 2585 / 0;
console.log('let result - 2585 / 0 = ${2585 / 0}');

result = 999343999993999 ** 35;
console.log('999343999993999 ** 35 = ${result}');
 -->

<!-- Array
 -->
<!-- 
let myArray = [];
let myArray = [1, 15, 3, 33, 68];

myArray[3] = 'Hello';
myArray['3'] = 'Goodbye';

myArray.length;

console.log(typeof myArray)
 -->


<!-- 3. Parameter passing -->
<!-- Function definition -->
<!--
function square(number) {
    return number * number;
  }
-->  

<!-- Passing an object as a parameter -->
<!-- 
function myFunc(theObject) {
    theObject.make = "Toyota";
  }
  
  const myCar = {
    make: "Honda",
    model: "Accord",
    year: 1998,
  };
  
  console.log(myCar.make); // "Honda"
  myFunc(myCar);
  console.log(myCar.make); // "Toyota"
-->   

<!-- Passing an array as a parameter -->
<!-- 
function myFunc(theArr) {
  theArr[0] = 30;
}

const arr = [45];

console.log(arr[0]); // 45
myFunc(arr);
console.log(arr[0]); // 30
--> 

<!-- Nested function declarations and expressions -->
<!-- 
function addSquares(a, b) {
  function square(x) {
    return x * x;
  }
  return square(a) + square(b);
}
-->